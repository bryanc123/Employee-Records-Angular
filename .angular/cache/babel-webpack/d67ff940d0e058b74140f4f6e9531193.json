{"ast":null,"code":"import { throwError as observableThrowError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.usersUrl = 'https://jsonplaceholder.typicode.com/users';\n    }\n\n    getUsers() {\n      return this.http.get(this.usersUrl).pipe(map(data => data), catchError(this.handleError));\n    }\n\n    getUser(id) {\n      return this.getUsers().pipe(map(users => users.find(user => user.id === id)));\n    }\n\n    postUser(user) {\n      const headers = new Headers({\n        'Content-Type': 'application/json; charset=UTF-8'\n      });\n      return this.http.post(this.usersUrl, JSON.stringify(user)).pipe(catchError(this.handleError));\n    }\n\n    handleError(res) {\n      console.error(res.error || res.body.error);\n      return observableThrowError(res.error || 'Server error');\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}